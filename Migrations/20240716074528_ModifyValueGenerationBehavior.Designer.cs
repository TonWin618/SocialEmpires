// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SocialEmpires.Models;

#nullable disable

namespace SocialEmpires.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240716074528_ModifyValueGenerationBehavior")]
    partial class ModifyValueGenerationBehavior
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SocialEmpires.Models.Bulletins.Bulletin", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("PublishedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PublisherId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ComplexProperty<Dictionary<string, object>>("HtmlContent", "SocialEmpires.Models.Bulletins.Bulletin.HtmlContent#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Bulletins");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Category", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.Category.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.DartsItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExtraItem")
                        .HasColumnType("int");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StartDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("DartsItems");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.ExpansionPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<int>("Neighbors")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("ExpansionPrices");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.FindableItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "SocialEmpires.Models.Configs.FindableItem.Description#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "SocialEmpires.Models.Configs.FindableItem.Title#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("FindableItems");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.GlobalSetting", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("GlobalSettings");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.HonorLevel", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Points")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Rank", "SocialEmpires.Models.Configs.HonorLevel.Rank#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("HonorLevels");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Image", b =>
                {
                    b.Property<string>("Key")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Key");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Achievement")
                        .HasColumnType("bit");

                    b.Property<float>("Activation")
                        .HasColumnType("real");

                    b.Property<int>("Attack")
                        .HasColumnType("int");

                    b.Property<int>("AttackInterval")
                        .HasColumnType("int");

                    b.Property<int>("AttackRange")
                        .HasColumnType("int");

                    b.Property<string>("CategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Collect")
                        .HasColumnType("int");

                    b.Property<string>("CollectType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CollectXp")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("CostType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CostUnitCash")
                        .HasColumnType("int");

                    b.Property<string>("Defense")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int");

                    b.Property<int>("Elevation")
                        .HasColumnType("int");

                    b.Property<int>("Expiration")
                        .HasColumnType("int");

                    b.Property<bool>("Flying")
                        .HasColumnType("bit");

                    b.Property<int>("GiftLevel")
                        .HasColumnType("int");

                    b.Property<bool>("Giftable")
                        .HasColumnType("bit");

                    b.Property<string>("Groups")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Height")
                        .HasColumnType("int");

                    b.Property<string>("ImgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStore")
                        .HasColumnType("bit");

                    b.Property<string>("IphoneAdjustments")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Life")
                        .HasColumnType("int");

                    b.Property<string>("MaxFrame")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<bool>("NewItem")
                        .HasColumnType("bit");

                    b.Property<string>("OnlyMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Population")
                        .HasColumnType("int");

                    b.Property<int>("Potion")
                        .HasColumnType("int");

                    b.Property<bool>("Protect")
                        .HasColumnType("bit");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowOnMobile")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ShowOnMobileStore")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Size")
                        .HasColumnType("int");

                    b.Property<string>("StoreGroups")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StoreLevel")
                        .HasColumnType("int");

                    b.Property<string>("SubcatFunctional")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SubcategoryId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Trains")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnitCapacity")
                        .HasColumnType("int");

                    b.Property<int>("UnitsLimit")
                        .HasColumnType("int");

                    b.Property<string>("UpgradesTo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Velocity")
                        .HasColumnType("int");

                    b.Property<int>("Width")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("AchievementDesc", "SocialEmpires.Models.Configs.Item.AchievementDesc#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.Item.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Level", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExpRequired")
                        .HasColumnType("int");

                    b.Property<int>("RewardAmount")
                        .HasColumnType("int");

                    b.Property<string>("RewardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ToLevel")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.Level.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Levels");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.LevelRankingReward", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("LevelRankingRewards");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.LocalizationString", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.LocalizationString.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Text", "SocialEmpires.Models.Configs.LocalizationString.Text#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("LocalizationStrings");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Magic", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<string>("ImgName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("Target")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "SocialEmpires.Models.Configs.Magic.Description#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.Magic.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Magics");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.MapPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("MapPrices");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Mission", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Hint")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Reward")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Description", "SocialEmpires.Models.Configs.Mission.Description#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Title", "SocialEmpires.Models.Configs.Mission.Title#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("Missions");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.NeighborAssist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Rnd")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Action", "SocialEmpires.Models.Configs.NeighborAssist.Action#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Notification", "SocialEmpires.Models.Configs.NeighborAssist.Notification#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Reward", "SocialEmpires.Models.Configs.NeighborAssist.Reward#Reward", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<int>("Cash")
                                .HasColumnType("int");

                            b1.Property<int>("Coins")
                                .HasColumnType("int");

                            b1.Property<int>("Xp")
                                .HasColumnType("int");
                        });

                    b.ComplexProperty<Dictionary<string, object>>("Task", "SocialEmpires.Models.Configs.NeighborAssist.Task#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("NeighborAssists");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.OfferPack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CostCash")
                        .HasColumnType("int");

                    b.Property<bool>("Enabled")
                        .HasColumnType("bit");

                    b.Property<int>("Food")
                        .HasColumnType("int");

                    b.Property<int>("Gold")
                        .HasColumnType("int");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("PackType")
                        .HasColumnType("int");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Stone")
                        .HasColumnType("int");

                    b.Property<int>("Wood")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("OfferPacks");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.SocialItem", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("WorkerCost")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Workers", "SocialEmpires.Models.Configs.SocialItem.Workers#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("SocialItems");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.SubCategory", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("Parent")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.SubCategory.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("SubCategories");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TournamentOpponent", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("TournamentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("TournamentOpponents");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TournamentPrize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("G")
                        .HasColumnType("int");

                    b.Property<int?>("TournamentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("U")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TournamentTypeId");

                    b.ToTable("TournamentPrices");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TournamentType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<long>("MapId")
                        .HasColumnType("bigint");

                    b.Property<int>("MinLevel")
                        .HasColumnType("int");

                    b.Property<int>("NumPlayers")
                        .HasColumnType("int");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourceType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WeeklyTournaments")
                        .HasColumnType("int");

                    b.ComplexProperty<Dictionary<string, object>>("Name", "SocialEmpires.Models.Configs.TournamentType.Name#MultiLanguageString", b1 =>
                        {
                            b1.IsRequired();

                            b1.Property<string>("en")
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("zh")
                                .HasColumnType("nvarchar(max)");
                        });

                    b.HasKey("Id");

                    b.ToTable("TournamentTypes");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TownPrice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("TownPrices");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.UnitsCollectionsCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryLangId")
                        .HasColumnType("int");

                    b.Property<int>("Cost")
                        .HasColumnType("int");

                    b.Property<string>("Costs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Position")
                        .HasColumnType("int");

                    b.Property<int>("Rewards")
                        .HasColumnType("int");

                    b.Property<string>("Units")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UnitsCollectionsCategories");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.EmpireMap", b =>
                {
                    b.Property<string>("Pid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Coins")
                        .HasColumnType("int");

                    b.Property<string>("Expansions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExpirableUnitsTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Food")
                        .HasColumnType("int");

                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<int>("IdCurrentTreasure")
                        .HasColumnType("int");

                    b.Property<int>("IncreasedPopulation")
                        .HasColumnType("int");

                    b.Property<string>("Items")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastQuestTimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Level")
                        .HasColumnType("int");

                    b.Property<string>("PlayerSavePid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("QuestTimes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Race")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ReceivedAssists")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ResourcesTraded")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Skin")
                        .HasColumnType("int");

                    b.Property<int>("Stone")
                        .HasColumnType("int");

                    b.Property<long>("Timestamp")
                        .HasColumnType("bigint");

                    b.Property<long>("TimestampLastTreasure")
                        .HasColumnType("bigint");

                    b.Property<string>("UniversAttackWin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Wood")
                        .HasColumnType("int");

                    b.Property<int>("Xp")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.HasIndex("PlayerSavePid");

                    b.ToTable("EmpireMaps");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.PlayerInfo", b =>
                {
                    b.Property<string>("Pid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Cash")
                        .HasColumnType("int");

                    b.Property<int>("CompletedTutorial")
                        .HasColumnType("int");

                    b.Property<int>("DefaultMap")
                        .HasColumnType("int");

                    b.Property<long>("LastLoggedIn")
                        .HasColumnType("bigint");

                    b.Property<string>("MapNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MapSizes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pic")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WorldId")
                        .HasColumnType("int");

                    b.HasKey("Pid");

                    b.ToTable("PlayerInfos");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.PlayerSave", b =>
                {
                    b.Property<string>("Pid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PlayerInfoPid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PrivateStatePid")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Pid");

                    b.HasIndex("PlayerInfoPid");

                    b.HasIndex("PrivateStatePid");

                    b.ToTable("PlayerSaves");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.PlayerState", b =>
                {
                    b.Property<string>("Pid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ArrayAnimals")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AttacksSent")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("BonusNextId")
                        .HasColumnType("int");

                    b.Property<string>("BoughtUnits")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CompletedMissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountTimePacket")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DartsBalloonsShot")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("DartsGotExtra")
                        .HasColumnType("bit");

                    b.Property<bool>("DartsHasFree")
                        .HasColumnType("bit");

                    b.Property<int>("DartsRandomSeed")
                        .HasColumnType("int");

                    b.Property<int>("DragonNestActive")
                        .HasColumnType("int");

                    b.Property<int>("DragonNumber")
                        .HasColumnType("int");

                    b.Property<string>("Gifts")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("InfoShowed")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("KompuCompleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("KompuLastTimeStamp")
                        .HasColumnType("bigint");

                    b.Property<int>("KompuSpells")
                        .HasColumnType("int");

                    b.Property<string>("KompuSteps")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastUpgrades")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Magics")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Mana")
                        .HasColumnType("int");

                    b.Property<int>("MonsterNestActive")
                        .HasColumnType("int");

                    b.Property<int>("MonsterNumber")
                        .HasColumnType("int");

                    b.Property<string>("NeighborAssists")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Potion")
                        .HasColumnType("int");

                    b.Property<string>("QuestsRank")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RewardedMissions")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RiderNumber")
                        .HasColumnType("int");

                    b.Property<int>("RiderStepNumber")
                        .HasColumnType("int");

                    b.Property<long>("RiderTimeStamp")
                        .HasColumnType("bigint");

                    b.Property<int>("StepMonsterNumber")
                        .HasColumnType("int");

                    b.Property<int>("StepNumber")
                        .HasColumnType("int");

                    b.Property<int>("Strategy")
                        .HasColumnType("int");

                    b.Property<string>("Teams")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("TimeStampDartsNewFree")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStampDartsReset")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStampHeavySiegeAttack")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStampHeavySiegePeriod")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStampTakeCare")
                        .HasColumnType("bigint");

                    b.Property<long>("TimeStampTakeCareMonster")
                        .HasColumnType("bigint");

                    b.Property<long>("TimestampLastBonus")
                        .HasColumnType("bigint");

                    b.Property<string>("UnitCollectionsCompleted")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UnlockedEarlyBuildings")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UnlockedQuestIndex")
                        .HasColumnType("int");

                    b.Property<string>("UnlockedSkins")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Pid");

                    b.ToTable("PlayerStates");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.SubCategory", b =>
                {
                    b.HasOne("SocialEmpires.Models.Configs.Category", null)
                        .WithMany("Sub")
                        .HasForeignKey("CategoryId");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TournamentOpponent", b =>
                {
                    b.HasOne("SocialEmpires.Models.Configs.TournamentType", null)
                        .WithMany("WeeklyOpponent")
                        .HasForeignKey("TournamentTypeId");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TournamentPrize", b =>
                {
                    b.HasOne("SocialEmpires.Models.Configs.TournamentType", null)
                        .WithMany("Prize")
                        .HasForeignKey("TournamentTypeId");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.EmpireMap", b =>
                {
                    b.HasOne("SocialEmpires.Models.PlayerSaves.PlayerSave", null)
                        .WithMany("Maps")
                        .HasForeignKey("PlayerSavePid");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.PlayerSave", b =>
                {
                    b.HasOne("SocialEmpires.Models.PlayerSaves.PlayerInfo", "PlayerInfo")
                        .WithMany()
                        .HasForeignKey("PlayerInfoPid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SocialEmpires.Models.PlayerSaves.PlayerState", "PrivateState")
                        .WithMany()
                        .HasForeignKey("PrivateStatePid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlayerInfo");

                    b.Navigation("PrivateState");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.Category", b =>
                {
                    b.Navigation("Sub");
                });

            modelBuilder.Entity("SocialEmpires.Models.Configs.TournamentType", b =>
                {
                    b.Navigation("Prize");

                    b.Navigation("WeeklyOpponent");
                });

            modelBuilder.Entity("SocialEmpires.Models.PlayerSaves.PlayerSave", b =>
                {
                    b.Navigation("Maps");
                });
#pragma warning restore 612, 618
        }
    }
}
